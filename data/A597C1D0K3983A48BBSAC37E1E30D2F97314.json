{
    "uid": "A597C1D0K3983A48BBSAC37E1E30D2F97314",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_TextRenderer",
        "type": "game_script",
        "order": 10,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_TextRenderer\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\n\nclass RendererTextLine\n    ###*\n    * Stores a text line.\n    *\n    * @module gs.RendererTextLine\n    * @class RendererTextLine\n    * @memberof gs.RendererTextLine\n    * @constructor\n    ###\n    constructor: ->\n        ###\n        * The width of the line in pixels.\n        * @property width\n        * @type number\n        * @protected\n        ###\n        @width = 0\n        ###\n        * The height of the line in pixels.\n        * @property width\n        * @type number\n        * @protected\n        ###\n        @height = 0\n        ###\n        * The descent of the line in pixels.\n        * @property descent\n        * @type number\n        * @protected\n        ###\n        @descent = 0\n        ###\n        * The content of the line as token objects.\n        * @property content\n        * @type Object[]\n        * @protected\n        ###\n        @content = []\n\ngs.RendererTextLine = RendererTextLine\n\nclass RendererToken\n    ###*\n    * Stores a token.\n    *\n    * @module gs\n    * @class RendererToken\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (code, value, font) ->\n        ###\n        * The value of the token. That value depends on the token type. For text-tokens, it stores\n        * the actual text.\n        * @property content\n        * @type string\n        ###\n        @value = value\n        ###\n        * The code describes what kind of token it is. For example, if the code is \"Y\" it means it is a\n        * style-token. If the code is <b>null</b>, it means it is a text-token.\n        * @property code\n        * @type string\n        ###\n        @code = code\n        ###\n        * The format stores the font-style properties of the token like if it is italic, bold, etc. It can be <b>null</b>.\n        * @property format\n        * @type Object\n        ###\n        @format = null\n        ###\n        * A plain object to store custom data within the token.\n        * @property customData\n        * @type Object\n        ###\n        @customData = {}\n\n        @takeFormat(font) if font?\n\n    ###*\n    * Takes the style from the specified font and stores it into the format-property. The token will\n    * will be rendered with that style then.\n    *\n    * @method takeFormat\n    * @param {gs.Font} font - The font to take the style from.\n    ###\n    takeFormat: (font) ->\n        @format = font.toDataBundle()\n\n    ###*\n    * Applies the format-style of the token on the specified font. The font will have the style from\n    * then token then.\n    *\n    * @method applyFormat\n    * @param {gs.Font} font - The font to apply the format-style on.\n    ###\n    applyFormat: (font) ->\n        font.set(@format)\n\ngs.RendererToken = RendererToken\n\nclass Component_TextRenderer extends gs.Component\n    ###*\n    * A text-renderer component allow to draw plain or formatted text on a\n    * game object's bitmap. For formatted text, different text-codes can be\n    * used to add formatting or define a placeholder.<br><br>\n    *\n    * A text-code uses the following syntax:<br><br>\n    *\n    * {code:value} <- Single Value<br />\n    * {code:value1,value2,...} <- Multiple Values<br><br>\n    *\n    * Example:<br><br>\n    *\n    * \"This is {Y:I}a Text{Y:N}\" <- \"a Text\" will be italic here.<br>\n    * \"The value is {GN:1}\" <- \"{GN:1}\" will be replaced for the value of the global number variable 0001.<br><br>\n    *\n    * For a list of all available text-codes with examples, just take a look into the offical help-file.\n    *\n    * @module gs\n    * @class Component_TextRenderer\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        super\n\n        ###*\n        * @property currentX\n        * @type number\n        * @protected\n        ###\n        @currentX = 0\n\n        ###*\n        * @property currentY\n        * @type number\n        * @protected\n        ###\n        @currentY = 0\n\n        ###*\n        * @property currentLineHeight\n        * @type number\n        * @protected\n        ###\n        @currentLineHeight = 0\n\n        ###*\n        * @property font\n        * @type gs.Font\n        * @protected\n        ###\n        @font = new Font(\"Times New Roman\", 22)\n\n        ###*\n        * @property spaceSize\n        * @type number\n        * @protected\n        ###\n        @spaceSize = 0\n\n        ###*\n        * @property fontSize\n        * @type number\n        * @protected\n        ###\n        @fontSize = 0\n\n        ###*\n        * The left and right padding per line.\n        * @property padding\n        * @type number\n        ###\n        @padding = 0\n\n        ###*\n        * The spacing between text lines in pixels.\n        * @property lineSpacing\n        * @type number\n        ###\n        @lineSpacing = 0\n\n    ###*\n    * Creates the token-object for a list-placeholder. A list-placeholder\n    * allows to insert a value from a list-variable.\n    *\n    * @method createListToken\n    * @param {Array} list - The list.\n    * @param {Array} values - The values of the list-placeholder text-code.\n    * @return {string} The token-object.\n    ###\n    createListToken: (list, values) ->\n        index = 0\n        if values[1]?\n            values = values[1].split(\":\")\n            index = values[0]\n            if values[0] == \"G\"\n                index = GameManager.variableStore.numbers[parseInt(values[1])-1]\n            else if values[0] == \"P\"\n                index = GameManager.variableStore.persistentNumbers[parseInt(values[1])-1]\n            else if values[0] == \"L\"\n                index = GameManager.variableStore.numberValueOf({ scope: 0, index: parseInt(values[1])-1})\n\n        return \"\" + list[index]\n\n\n    ###*\n    * Parses and returns the variable identifier which is an array containing\n    * the optional domain name and the variable index as: [domain, index].\n    *\n    * @method parseVariableIdentifier\n    * @param {string} identifier - The variable identifier e.g. com.degica.vnm.default.1 or com.degica.vnm.default.VarName\n    * @param {string} type - The variable type to parse: number, string, boolean or list\n    * @param {string} type - The scope of the variable to parse: 0 = local, 1 = global, 2 = persistent.\n    * @return {Array} An array containing two values as: [domain, index]. If the identifier doesn't contain a domain-string, the domain will be 0 (default).\n    ###\n    parseVariableIdentifier: (identifier, type, scope) ->\n        result = [0, identifier]\n\n        if isNaN(identifier)\n            index = identifier.lastIndexOf(\".\")\n            if index != -1\n                result[0] = identifier.substring(0, index)\n                result[1] = identifier.substring(index+1)\n                if isNaN(result[1])\n                    result[1] = GameManager.variableStore.indexOfVariable(result[1], type, scope, result[0]) + 1\n                else\n                    result[1] = parseInt(result[1])\n            else\n                result[1] = GameManager.variableStore.indexOfVariable(result[1], type, scope, result[0]) + 1\n        else\n            result[1] = parseInt(result[1])\n\n        return result\n\n    replacePlaceholderTokens: (text) ->\n        result = text\n        result = text.replace(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm, (m, code, value) =>\n            token = @createToken(code, value)\n            if typeof(token) == \"string\"\n                return token\n            else\n                return m        \n        )\n        return result\n        \n    ###*\n    * Creates a token-object for a specified text-code.\n    *\n    * @method createToken\n    * @param {string} code - The code/type of the text-code.\n    * @param {string} value - The value of the text-code.\n    * @return {Object} The token-object.\n    ###\n    createToken: (code, value) ->\n        tokenObject = null\n        value = if isNaN(value) then value else parseInt(value)\n        switch code\n            when \"SZ\"\n                tokenObject = new gs.RendererToken(code, value)\n                @font.size = tokenObject.value || @fontSize\n                @spaceSize = @font.measureTextPlain(\" \")\n            when \"Y\"\n                tokenObject = { code: code, value: value }\n                switch value\n                    when \"U\" then @font.underline = yes\n                    when \"S\" then @font.strikeThrough = yes\n                    when \"I\" then @font.italic = yes\n                    when \"B\" then @font.bold = yes\n                    when \"C\" then @font.smallCaps = yes\n                    when \"NU\" then @font.underline = no\n                    when \"NS\" then @font.strikeThrough = no\n                    when \"NI\" then @font.italic = no\n                    when \"NB\" then @font.bold = no\n                    when \"NC\" then @font.smallCaps = no\n                    when \"N\"\n                        @font.underline = no\n                        @font.strikeThrough = no\n                        @font.italic = no\n                        @font.bold = no\n                        @font.smallCaps = no\n                @spaceSize = @font.measureTextPlain(\" \")\n            when \"C\"\n                tokenObject = new gs.RendererToken(code, value)\n                if isNaN(value)\n                    @font.color = gs.Color.fromHex(value)\n                else if value <= 0\n                    @font.color = Font.defaultColor\n                else\n                    @font.color = gs.Color.fromObject(RecordManager.system.colors[value-1] || Font.defaultColor)\n            when \"GN\"\n                values = if isNaN(value) then value.split(\",\") else [value]\n                if values[1]\n                    format = values[1]\n                    values = @parseVariableIdentifier(values[0], \"number\", 1)\n                    tokenObject = sprintf(\"%\"+format+\"d\", (GameManager.variableStore.numbersByDomain[values[0]||0][values[1]-1] || 0))\n                else\n                    values = @parseVariableIdentifier(values[0], \"number\", 1)\n                    tokenObject = (GameManager.variableStore.numbersByDomain[values[0]||0][values[1]-1] || 0).toString()\n            when \"GT\"\n                values = @parseVariableIdentifier(value, \"string\", 1)\n                tokenObject = (GameManager.variableStore.stringsByDomain[values[0]||0][values[1]-1] || \"\")\n                tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n                if tokenObject.length > 1\n                    last = tokenObject[tokenObject.length - 1]\n                    tokenObject.pop() unless last?.length > 0\n                else\n                    tokenObject = tokenObject[0] ? \"\"\n            when \"GS\"\n                values = @parseVariableIdentifier(value, \"boolean\", 1)\n                tokenObject = (GameManager.variableStore.booleansByDomain[values[0]||0][values[1]-1] || false).toString()\n            when \"GL\"\n                values = value.split(\",\")\n                listIdentifier = @parseVariableIdentifier(values[0], \"list\", 1)\n                tokenObject = @createListToken(GameManager.variableStore.listsByDomain[listIdentifier[0]][listIdentifier[1]-1] || [], values)\n            when \"PN\"\n                values = if isNaN(value) then value.split(\",\") else [value]\n                if values[1]\n                    format = values[1]\n                    values = @parseVariableIdentifier(values[0], \"number\", 2)\n                    tokenObject = sprintf(\"%\"+format+\"d\", (GameManager.variableStore.persistentNumbers[values[0]]?[values[1]-1] || 0))\n                else\n                    values = @parseVariableIdentifier(values[0], \"number\", 2)\n                    tokenObject = (GameManager.variableStore.persistentNumbersByDomain[values[0]||0]?[values[1]-1] || 0).toString()\n            when \"PT\"\n                values = @parseVariableIdentifier(value, \"string\", 2)\n                tokenObject = (GameManager.variableStore.persistentStringsByDomain[values[0]]?[values[1]-1] || \"\")\n                tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n                if tokenObject.length > 1\n                    last = tokenObject[tokenObject.length - 1]\n                    tokenObject.pop() unless last?.length > 0\n                else\n                    tokenObject = tokenObject[0] ? \"\"\n            when \"PS\"\n                values = @parseVariableIdentifier(value, \"boolean\", 2)\n                tokenObject = (GameManager.variableStore.persistentBooleansByDomain[values[0]]?[values[1]-1] || false).toString()\n            when \"PL\"\n                values = value.split(\",\")\n                listIdentifier = @parseVariableIdentifier(values[0], \"list\", 2)\n                tokenObject = @createListToken(GameManager.variableStore.persistentListsByDomain[listIdentifier[0]]?[listIdentifier[1]-1] || [], values)\n            when \"LN\"\n                values = if isNaN(value) then value.split(\",\") else [value]\n                if values[1]\n                    format = values[1]\n                    values = @parseVariableIdentifier(values[0], \"number\", 0)\n                    tokenObject = sprintf(\"%\"+format+\"d\", (GameManager.variableStore.numberValueOf({ scope: 0, index: values[1]-1}) || 0))\n                else\n                    values = @parseVariableIdentifier(values[0], \"number\", 0)\n                    tokenObject = (GameManager.variableStore.numberValueOf({ scope: 0, index: values[1]-1}) || 0).toString()\n            when \"LT\"\n                values = @parseVariableIdentifier(value, \"string\", 0)\n                tokenObject = (GameManager.variableStore.stringValueOf({ scope: 0, index: values[1]-1}) || \"\").toString()\n                tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n                if tokenObject.length > 1\n                    last = tokenObject[tokenObject.length - 1]\n                    tokenObject.pop() unless last?.length > 0\n                else\n                    tokenObject = tokenObject[0] ? \"\"\n            when \"LS\"\n                values = @parseVariableIdentifier(value, \"boolean\", 0)\n                tokenObject = (GameManager.variableStore.booleanValueOf({ scope: 0, index: values[1]-1}) || false).toString()\n            when \"LL\"\n                values = value.split(\",\")\n                listIdentifier = @parseVariableIdentifier(values[0], \"list\", 0)\n                tokenObject = @createListToken(GameManager.variableStore.listObjectOf({ scope: 0, index: listIdentifier[1]-1}) || [], values)\n            when \"N\"\n                tokenObject = (if RecordManager.characters[value]? then lcs(RecordManager.characters[value].name) else \"\")\n            when \"RT\"\n                pair = value.split(\"/\")\n                tokenObject = { code: code, rtStyleId: pair[2] ? 0, rb: pair[0], rt: pair[1], rbSize: { width: 0, height: 0 }, rtSize: { width: 0, height: 0 } }\n            when \"M\"\n                macro = RecordManager.system.textMacros.first (m) -> m.name == value\n                if macro\n                    if macro.type == 0 # Text + Codes\n                        tokenObject = macro.content.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n                        tokenObject.pop()\n                    else if macro.type == 1 # Placeholder Script Macro\n                        if !macro.contentFunc\n                            macro.contentFunc = eval(\"(function(object, value){ #{macro.content} })\")\n                        tokenObject = macro.contentFunc(@object, value)\n                        tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n                        if tokenObject.length > 1\n                            tokenObject.pop()\n                    else # Script Macro\n                        if !macro.contentFunc\n                            macro.contentFunc = eval(\"(function(object){ #{macro.content} })\")\n                        tokenObject = new gs.RendererToken(\"X\", macro.contentFunc)\n                else\n                    tokenObject = \"\"\n            else\n                tokenObject = new gs.RendererToken(code, value)\n\n        return tokenObject\n\n\n    ###*\n    * <p>Gets the correct font for the specified ruby-text token.</p>\n    *\n    * @param {Object} token - A ruby-text token.\n    * @return {gs.Font} The font for the ruby-text which is shown above the original text.\n    * @method getRubyTextFont\n    ###\n    getRubyTextFont: (token) ->\n        style = null\n        font = null\n\n        if token.rtStyleId\n            style = ui.UIManager.styles[\"rubyText-\"+token.rtStyleId]\n\n        if !style\n            style = ui.UIManager.styles[\"rubyText\"]\n\n        font = style?.font ? @font\n        font.size = font.size || @font.size / 2\n\n        return font\n\n    ###*\n    * <p>Measures a control-token. If a token produces a visual result like displaying an icon then it must return the size taken by\n    * the visual result. If the token has no visual result, <b>null</b> must be returned. This method is called for every token when the message is initialized.</p>\n    *\n    * @param {Object} token - A control-token.\n    * @return {gs.Size} The size of the area taken by the visual result of the token or <b>null</b> if the token has no visual result.\n    * @method measureControlToken\n    * @protected\n    ###\n    measureControlToken: (token) -> # Can be implemented by derived classes\n        size = null\n\n        switch token.code\n            when \"A\" # Animation\n                animation = RecordManager.animations[Math.max(token.value-1, 0)]\n                if animation?.graphic.name?\n                    imageBitmap = ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic))\n                    if imageBitmap?\n                        size = width: Math.round(imageBitmap.width / animation.framesX), height: Math.round(imageBitmap.height / animation.framesY)\n            when \"RT\" # Ruby Text\n                font = @getRubyTextFont(token)\n                fs = font.size\n                font.size = font.size || @font.size / 2\n                token.rbSize = @font.measureTextPlain(token.rb)\n                token.rtSize = font.measureTextPlain(token.rt)\n                font.size = fs\n\n                size = width: Math.max(token.rbSize.width, token.rtSize.width), height: token.rbSize.height + token.rtSize.height\n\n        return size\n\n    ###*\n    * <p>Draws the visual result of a token, like an icon for example, to the specified bitmap. This method is called for every token while the text is rendered.</p>\n    *\n    * @param {Object} token - A control-token.\n    * @param {gs.Bitmap} bitmap - The bitmap used for the current text-line. Can be used to draw something on it like an icon, etc.\n    * @param {number} offset - An x-offset for the draw-routine.\n    * @method drawControlToken\n    * @protected\n    ###\n    drawControlToken: (token, bitmap, offset) ->\n        switch token.code\n            when \"A\" # Animation\n                animation = RecordManager.animations[Math.max(token.value-1, 0)]\n                if animation?.graphic.name?\n                    imageBitmap = ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic))\n                    if imageBitmap?\n                        rect = new gs.Rect(0, 0, Math.round(imageBitmap.width / animation.framesX), Math.round(imageBitmap.height / animation.framesY))\n                        bitmap.blt(offset, @currentY, imageBitmap, rect)\n            when \"RT\"\n                style = null\n                if token.rtStyleId\n                    style = ui.UIManager.styles[\"rubyText-\"+token.rtStyleId]\n                if !style\n                    style = ui.UIManager.styles[\"rubyText\"]\n\n                font = style?.font ? @object.font\n                fs = font.size\n                font.size = font.size || @object.font.size / 2\n\n                if style and !style.descriptor.font?.color\n                    font.color.set(@object.font.color)\n\n                bitmap.font = font\n                bitmap.drawText(offset, bitmap.font.descent, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rt, 1, 0)\n                bitmap.font = @object.font\n                font.size = fs\n                bitmap.drawText(offset, token.rtSize.height, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rb, 1, 0)\n\n\n    ###*\n    * Splits up the specified token using a japanese word-wrap technique.\n    *\n    * @method wordWrapJapanese\n    * @param {Object} token - The token to split up.\n    * @param {gs.RendererTextLine} line - The current line.\n    * @param {number} width - The width of the current line.\n    * @param {number} height - The height of the current line.\n    * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n    * lines are added to this result array.\n    * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n    * are created it has to be the last new created line.\n    ###\n    wordWrapJapanese: (token, line, width, height, result) ->\n        startOfLine = '—…‥〳〴〵。.・、:;, ?!‼⁇⁈⁉‐゠–〜)]｝〕〉》」』】〙〗〟’\"｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻'\n        endOfLine = '([｛〔〈《「『【〘〖〝‘\"｟«'\n        noSplit = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789０１２３４５６７８９—…‥〳〴〵'\n        descent = @font.descent\n        size = @font.measureTextPlain(token)\n        depth = 8\n        depthLevel = 0\n        i = 0\n        j = 0\n        lastCharacterIndex = 0\n\n        if size.width > @object.dstRect.width-@spaceSize.width*3-@padding*2\n            while i < token.length\n                ch = token[i]\n                size = @font.measureTextPlain(ch)\n                width += size.width\n                moved = no\n                if width > @object.dstRect.width - @padding*2\n                    depthLevel = 0\n                    j = i\n\n                    loop\n                        moved = no\n\n                        while j > 0 and startOfLine.indexOf(token[j]) != -1\n                            j--\n                            moved = yes\n\n                        while j > 0 and endOfLine.indexOf(token[j-1]) != -1\n                            j--\n                            moved = yes\n\n                        while j > 0 and noSplit.indexOf(token[j-1]) != -1\n                            j--\n                            moved = yes\n\n                        if j == 0 and moved\n                            break\n                        else\n                            i = j\n\n                        depthLevel++\n                        break if depthLevel >= depth or !moved\n\n                    line.content.push(new gs.RendererToken(null, token.substring(lastCharacterIndex, i), @font))\n                    lastCharacterIndex = i\n                    line.height = Math.max(height, @font.lineHeight)\n                    line.width = width - size.width\n                    line.descent = descent\n                    descent = @font.descent\n                    height = size.height\n                    result.push(line)\n                    line = new gs.RendererTextLine()\n                    width = width - (width - size.width)\n\n                i++\n        else\n            line.content.push(new gs.RendererToken(null, token, @font))\n            line.height = Math.max(height, @font.lineHeight)\n            line.width = width + size.width\n            line.descent = descent\n\n        height = Math.max(height, @font.lineHeight)\n\n        if lastCharacterIndex != i\n            line.content.push(new gs.RendererToken(null, token.substring(lastCharacterIndex, i), @font))\n            line.width = width\n            line.height = Math.max(height, line.height)\n            line.descent = descent\n\n        return line\n\n\n    ###*\n    * Does not word-wrapping at all. It just adds the text token to the line as is.\n    *\n    * @method wordWrapNone\n    * @param {Object} token - The token to split up.\n    * @param {gs.RendererTextLine} line - The current line.\n    * @param {number} width - The width of the current line.\n    * @param {number} height - The height of the current line.\n    * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n    * lines are added to this result array.\n    * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n    * are created it has to be the last new created line.\n    ###\n    wordWrapNone: (token, line, width, height, result) ->\n        size = @font.measureTextPlain(token)\n        height = Math.max(size.height, height || @font.lineHeight)\n\n        if token.length > 0\n            width += size.width\n            line.width = width\n            line.height = Math.max(height, line.height)\n            line.descent = @font.descent\n            line.content.push(new gs.RendererToken(null, token))\n\n        return line\n\n    ###*\n    * Splits up the specified token using a space-based word-wrap technique.\n    *\n    * @method wordWrapSpaceBased\n    * @param {Object} token - The token to split up.\n    * @param {gs.RendererTextLine} line - The current line.\n    * @param {number} width - The width of the current line.\n    * @param {number} height - The height of the current line.\n    * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n    * lines are added to this result array.\n    * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n    * are created it has to be the last new created line.\n    ###\n    wordWrapSpaceBased: (token, line, width, height, result) ->\n        currentWords = []\n        words = token.split(\" \")\n        descent = @font.descent\n        @spaceSize = @font.measureTextPlain(\" \")\n\n        for word, i in words\n            size = @font.measureTextPlain(word)\n            width += size.width + @spaceSize.width\n\n            if width > @object.dstRect.width - @padding*2\n                token = new gs.RendererToken(null, currentWords.join(\" \"))\n                token.takeFormat(@font)\n                line.content.push(token)\n                line.height = Math.max(height, line.height)\n                line.width = width - size.width\n                line.descent = Math.max(line.descent, descent)\n                descent = Math.max(descent, @font.descent)\n                height = size.height\n                result.push(line)\n                line = new gs.RendererTextLine()\n                currentWords = [word]\n                width = width - (width - size.width)\n            else\n                currentWords.push(word)\n\n            height = Math.max(height, @font.lineHeight)\n\n        if currentWords.length > 0\n            token = new gs.RendererToken(null, currentWords.join(\" \"))\n            token.takeFormat(@font)\n            line.content.push(token)\n            line.width = width\n            line.height = Math.max(height, line.height)\n            line.descent = Math.max(descent, line.descent)\n\n        return line\n\n    ###*\n    * Splits up the specified token using a word-wrap technique. The kind of word-wrap technique\n    * depends on the selected language. You can overwrite this method in derived classes to implement your\n    * own custom word-wrap techniques.\n    *\n    * @method executeWordWrap\n    * @param {Object} token - The token to split up.\n    * @param {gs.RendererTextLine} line - The current line.\n    * @param {number} width - The width of the current line.\n    * @param {number} height - The height of the current line.\n    * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n    * lines are added to this result array.\n    * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n    * are created it has to be the last new created line.\n    ###\n    executeWordWrap: (token, line, width, height, result, wordWrap) ->\n        if wordWrap\n            switch LanguageManager.language.wordWrap\n                when \"spaceBased\"\n                    @wordWrapSpaceBased(token, line, width, height, result)\n                when \"japanese\"\n                    @wordWrapJapanese(token, line, width, height, result)\n        else\n            @wordWrapNone(token, line, width, height, result)\n\n\n    ###*\n    * Creates an a of line-objects. Each line-object is a list of token-objects.\n    * A token-object can be just a string or an object containing more information\n    * about how to process the token at runtime.\n    *\n    * A line-object also contains additional information like the width and height\n    * of the line(in pixels).\n    *\n    * If the wordWrap param is set, line-breaks are automatically created if a line\n    * doesn't fit into the width of the game object's bitmap.\n    *\n    * @method calculateLines\n    * @param {string} message - A message creating the line-objects for.\n    * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n    * @param {number} [firstLineWidth=0] - The current width of the first line.\n    * @return {Array} An array of line-objects.\n    ###\n    calculateLines: (message, wordWrap, firstLineWidth) ->\n        result = []\n        line = new gs.RendererTextLine()\n        width = firstLineWidth || 0\n        height = 0\n        descent = @font.descent\n        currentWords = []\n        size = null\n        @spaceSize = @font.measureChar(\" \")\n        @fontSize = @font.size\n\n        tokens = message.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm)\n        token = null\n        t = 0\n\n        underline = @font.underline\n        strikeThrough = @font.strikeThrough\n        italic = @font.italic\n        bold = @font.bold\n        smallCaps = @font.smallCaps\n\n        while t < tokens.length\n            token = tokens[t]\n\n            if t % 4 != 0\n                if token?\n                    tokenObject = @createToken(token, tokens[t+1])\n\n                    if tokenObject.push?\n                        Array.prototype.splice.apply(tokens, [t+3, 0].concat(tokenObject))\n                    else if not tokenObject.code?\n                        tokens[t+3] = tokenObject + tokens[t+3]\n                    else\n                        size = @measureControlToken(tokenObject)\n                        if size\n                            width += size.width\n                            height = Math.max(height, size.height)\n                        #descent = Math.max(@font.descent, descent)\n                        line.content.push(tokenObject)\n                else # Must be a new-line\n                    line.height = height || @font.lineHeight\n                    line.width = width\n                    line.descent = descent\n                    result.push(line)\n                    line = new gs.RendererTextLine()\n                    line.content.push(new gs.RendererToken(null, \"\\n\", @font))\n                    width = 0\n                    height = 0\n                    descent = @font.descent\n                t += 2\n            else if token.length > 0\n                line = @executeWordWrap(token, line, width, height, result, wordWrap)\n                width = line.width\n                height = line.height\n                descent = line.descent\n\n            t++\n\n        if line.content.length > 0 or result.length == 0\n            line.height = height\n            line.width = width\n            line.descent = descent\n            result.push(line)\n\n\n        @font.size = @fontSize\n        @font.underline = underline\n        @font.strikeThrough = strikeThrough\n        @font.italic = italic\n        @font.bold = bold\n        @font.smallCaps = smallCaps\n\n        return result\n\n\n    ###*\n    * Measures the dimensions of formatted lines in pixels. The result is not\n    * pixel-perfect.\n    *\n    * @method measureFormattedLines\n    * @param {gs.RendererTextLine[]} lines - An array of text lines to measure.\n    * @param {boolean} wordWrap - If wordWrap is set to true, automatically created line-breaks will be calculated.\n    * @result {Object} An object containing the width and height of the text.\n    ###\n    measureFormattedLines: (lines, wordWrap) ->\n        size = width: 0, height: 0\n\n        for line in lines\n            size.width = Math.max(line.width+2, size.width)\n            size.height += line.height + @lineSpacing\n\n        size.height -= @lineSpacing\n\n        return size\n\n    ###*\n    * Measures the dimensions of a formatted text in pixels. The result is not\n    * pixel-perfect.\n    *\n    * @method measureFormattedText\n    * @param {string} text - The text to measure.\n    * @param {boolean} wordWrap - If wordWrap is set to true, automatically created line-breaks will be calculated.\n    * @result {Object} An object containing the width and height of the text.\n    ###\n    measureFormattedText: (text, wordWrap) ->\n        @font.set(@object.font)\n\n        size = null\n        lines = @calculateLines(text, wordWrap)\n\n        size = @measureFormattedLines(lines, wordWrap)\n\n        return size\n\n    ###*\n    * Measures the dimensions of a plain text in pixels. Formatting and\n    * word-wrapping are not supported.\n    *\n    * @method measureText\n    * @param {string} text - The text to measure.\n    * @result {Object} An object containing the width and height of the text.\n    ###\n    measureText: (text) ->\n        size = width: 0, height: 0\n        lines = text.toString().split(\"\\n\")\n\n        for line in lines\n            lineSize = @object.font.measureText(text)\n            size.width = Math.max(size.width, lineSize.width)\n            size.height += @object.font.lineHeight + @lineSpacing\n\n        size.height -= @lineSpacing\n\n        return size\n\n    ###*\n    * Searches for a token in a list of tokens and returns the first match.\n    *\n    * @method findToken\n    * @param {number} startIndex - The index in the list of tokens where the search will start.\n    * @param {string} code - The code of the token to search for.\n    * @param {number} direction - The search direction, can be forward(1) or backward(-1).\n    * @param {Object[]} tokens - The list of tokens to search.\n    * @result {Object} The first token which matches the specified code or <b>null</b> if the token cannot be found.\n    ###\n    findToken: (startIndex, code, direction, tokens) ->\n        token = null\n        i = startIndex\n        if direction == -1\n            while i >= 0\n                t = tokens[i]\n                if t.code == code\n                    token = t\n                    break\n                i--\n\n        return token\n\n    ###*\n    * Searches for a specific kind of tokens between a start and an end token.\n    *\n    * @method findTokensBetween\n    * @param {number} startIndex - The index where the search will start.\n    * @param {number} endIndex - The index where the search will end.\n    * @param {string} code - The code of the token-type to search for.\n    * @param {Object[]} tokens - The list of tokens to search.\n    * @result {Object[]} List of tokens matching the specified code. Its an empty list if no tokens were found.\n    ###\n    findTokensBetween: (startIndex, endIndex, code, tokens) ->\n        result = []\n        s = startIndex\n        e = endIndex\n\n        while s < e\n            token = tokens[s]\n            if `token.code == code`\n                result.push(token)\n            s++\n\n        return result\n\n    ###*\n    * Processes a control-token. A control-token is a token which influences\n    * the text-rendering like changing the fonts color, size or style.\n    *\n    * Changes will be automatically applied to the game object's font.\n    *\n    * @method processControlToken\n    * @param {Object} token - A control-token.\n    * @return {Object} An object which can contain additional info needed for processing.\n    ###\n    processControlToken: (token) ->\n        result = null\n\n        switch token.code\n            when \"SZ\"\n                @object.font.size = token.value || @fontSize\n            when \"C\"\n                if isNaN(token.value)\n                    @object.font.color = gs.Color.fromHex(token.value)\n                else if token.value <= 0\n                    @object.font.color = Font.defaultColor\n                else\n                    @object.font.color = RecordManager.system.colors[token.value-1] || Font.defaultColor\n            when \"Y\"\n                switch token.value\n                    when \"U\" then @object.font.underline = yes\n                    when \"S\" then @object.font.strikeThrough = yes\n                    when \"I\" then @object.font.italic = yes\n                    when \"B\" then @object.font.bold = yes\n                    when \"C\" then @object.font.smallCaps = yes\n                    when \"NU\" then @object.font.underline = no\n                    when \"NS\" then @object.font.strikeThrough = no\n                    when \"NI\" then @object.font.underline = no\n                    when \"NB\" then @object.font.bold = no\n                    when \"NC\" then @object.font.smallCaps = no\n                    when \"N\"\n                        @object.font.underline = no\n                        @object.font.strikeThrough = no\n                        @object.font.italic = no\n                        @object.font.bold = no\n                        @object.font.smallCaps = no\n\n        return result\n\n    ###*\n    * Draws a plain text. Formatting and word-wrapping are not supported.\n    *\n    * @method drawText\n    * @param {number} x - The x-coordinate of the text's position.\n    * @param {number} y - The y-coordinate of the text's position.\n    * @param {number} width - Deprecated. Can be null.\n    * @param {number} height - Deprecated. Can be null.\n    * @param {string} text - The text to draw.\n    ###\n    drawText: (pl, pt, pr, pb, text) ->\n        lines = text.toString().split(\"\\n\")\n        font = @object.font\n        height = font.lineHeight\n\n        for line, i in lines\n            size = font.measureText(line)\n            @object.bitmap.drawText(pl, i * height + pt, size.width + pr+pl, height+pt+pb, line, 0, 0)\n\n        return null\n\n    ###*\n    * Draws an array of formatted text lines.\n    * If the wordWrap param is set, line-breaks are automatically created if a line\n    * doesn't fit into the width of the game object's bitmap.\n    *\n    * @method drawFormattedLines\n    * @param {number} pl - The left-padding of the text's position.\n    * @param {number} pt - The top-padding of the text's position.\n    * @param {number} pr - The right-padding of the text's position.\n    * @param {number} pb - The bottom-padding of the text's position.\n    * @param {gs.RendererTextLine[]} lines - An array of lines to draw.\n    * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n    ###\n    drawFormattedLines: (pl, pt, pr, pb, lines, wordWrap) ->\n        @currentX = pl\n        @currentY = pt\n        @currentLineHeight = 0\n\n        for line in lines\n            for token in line.content\n                if token.code?\n                    @processControlToken(token)\n                    size = @measureControlToken(token)\n                    if size\n                        @drawControlToken(token, @object.bitmap, @currentX)\n                        @currentX += size.width\n                else if token.value.length > 0\n                    font = @object.font\n                    height = line.height\n                    if token.value != \"\\n\"\n                        size = font.measureTextPlain(token.value)\n                        @object.bitmap.drawText(@currentX, @currentY + height - size.height + font.descent - line.descent, size.width+pl+pr, height+pt+pb, token.value, 0, 0)\n                        @currentX += size.width\n                    @currentLineHeight = Math.max(@currentLineHeight, height)\n            @currentY += (@currentLineHeight || @object.font.lineHeight) + @lineSpacing\n            @currentX = pl\n            @currentLineHeight = 0\n\n        return null\n\n    ###*\n    * Draws a formatted text.\n    * If the wordWrap param is set, line-breaks are automatically created if a line\n    * doesn't fit into the width of the game object's bitmap.\n    *\n    * @method drawFormattedText\n    * @param {number} x - The x-coordinate of the text's position.\n    * @param {number} y - The y-coordinate of the text's position.\n    * @param {number} width - Deprecated. Can be null.\n    * @param {number} height - Deprecated. Can be null.\n    * @param {string} text - The text to draw.\n    * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n    * @return {gs.RendererTextLine[]} The drawn text lines.\n    ###\n    drawFormattedText: (pl, pt, pr, pb, text, wordWrap) ->\n        lines = @calculateLines(text.toString(), wordWrap)\n\n        @drawFormattedLines(pl, pt, pr, pb, lines, wordWrap)\n\n        return lines\n\ngs.Component_TextRenderer = Component_TextRenderer",
        "compiledContent": "var Component_TextRenderer, RendererTextLine, RendererToken,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nRendererTextLine = (function() {\n\n  /**\n  * Stores a text line.\n  *\n  * @module gs.RendererTextLine\n  * @class RendererTextLine\n  * @memberof gs.RendererTextLine\n  * @constructor\n   */\n  function RendererTextLine() {\n\n    /*\n    * The width of the line in pixels.\n    * @property width\n    * @type number\n    * @protected\n     */\n    this.width = 0;\n\n    /*\n    * The height of the line in pixels.\n    * @property width\n    * @type number\n    * @protected\n     */\n    this.height = 0;\n\n    /*\n    * The descent of the line in pixels.\n    * @property descent\n    * @type number\n    * @protected\n     */\n    this.descent = 0;\n\n    /*\n    * The content of the line as token objects.\n    * @property content\n    * @type Object[]\n    * @protected\n     */\n    this.content = [];\n  }\n\n  return RendererTextLine;\n\n})();\n\ngs.RendererTextLine = RendererTextLine;\n\nRendererToken = (function() {\n\n  /**\n  * Stores a token.\n  *\n  * @module gs\n  * @class RendererToken\n  * @memberof gs\n  * @constructor\n   */\n  function RendererToken(code, value, font) {\n\n    /*\n    * The value of the token. That value depends on the token type. For text-tokens, it stores\n    * the actual text.\n    * @property content\n    * @type string\n     */\n    this.value = value;\n\n    /*\n    * The code describes what kind of token it is. For example, if the code is \"Y\" it means it is a\n    * style-token. If the code is <b>null</b>, it means it is a text-token.\n    * @property code\n    * @type string\n     */\n    this.code = code;\n\n    /*\n    * The format stores the font-style properties of the token like if it is italic, bold, etc. It can be <b>null</b>.\n    * @property format\n    * @type Object\n     */\n    this.format = null;\n\n    /*\n    * A plain object to store custom data within the token.\n    * @property customData\n    * @type Object\n     */\n    this.customData = {};\n    if (font != null) {\n      this.takeFormat(font);\n    }\n  }\n\n\n  /**\n  * Takes the style from the specified font and stores it into the format-property. The token will\n  * will be rendered with that style then.\n  *\n  * @method takeFormat\n  * @param {gs.Font} font - The font to take the style from.\n   */\n\n  RendererToken.prototype.takeFormat = function(font) {\n    return this.format = font.toDataBundle();\n  };\n\n\n  /**\n  * Applies the format-style of the token on the specified font. The font will have the style from\n  * then token then.\n  *\n  * @method applyFormat\n  * @param {gs.Font} font - The font to apply the format-style on.\n   */\n\n  RendererToken.prototype.applyFormat = function(font) {\n    return font.set(this.format);\n  };\n\n  return RendererToken;\n\n})();\n\ngs.RendererToken = RendererToken;\n\nComponent_TextRenderer = (function(superClass) {\n  extend(Component_TextRenderer, superClass);\n\n\n  /**\n  * A text-renderer component allow to draw plain or formatted text on a\n  * game object's bitmap. For formatted text, different text-codes can be\n  * used to add formatting or define a placeholder.<br><br>\n  *\n  * A text-code uses the following syntax:<br><br>\n  *\n  * {code:value} <- Single Value<br />\n  * {code:value1,value2,...} <- Multiple Values<br><br>\n  *\n  * Example:<br><br>\n  *\n  * \"This is {Y:I}a Text{Y:N}\" <- \"a Text\" will be italic here.<br>\n  * \"The value is {GN:1}\" <- \"{GN:1}\" will be replaced for the value of the global number variable 0001.<br><br>\n  *\n  * For a list of all available text-codes with examples, just take a look into the offical help-file.\n  *\n  * @module gs\n  * @class Component_TextRenderer\n  * @extends gs.Component\n  * @memberof gs\n  * @constructor\n   */\n\n  function Component_TextRenderer() {\n    Component_TextRenderer.__super__.constructor.apply(this, arguments);\n\n    /**\n    * @property currentX\n    * @type number\n    * @protected\n     */\n    this.currentX = 0;\n\n    /**\n    * @property currentY\n    * @type number\n    * @protected\n     */\n    this.currentY = 0;\n\n    /**\n    * @property currentLineHeight\n    * @type number\n    * @protected\n     */\n    this.currentLineHeight = 0;\n\n    /**\n    * @property font\n    * @type gs.Font\n    * @protected\n     */\n    this.font = new Font(\"Times New Roman\", 22);\n\n    /**\n    * @property spaceSize\n    * @type number\n    * @protected\n     */\n    this.spaceSize = 0;\n\n    /**\n    * @property fontSize\n    * @type number\n    * @protected\n     */\n    this.fontSize = 0;\n\n    /**\n    * The left and right padding per line.\n    * @property padding\n    * @type number\n     */\n    this.padding = 0;\n\n    /**\n    * The spacing between text lines in pixels.\n    * @property lineSpacing\n    * @type number\n     */\n    this.lineSpacing = 0;\n  }\n\n\n  /**\n  * Creates the token-object for a list-placeholder. A list-placeholder\n  * allows to insert a value from a list-variable.\n  *\n  * @method createListToken\n  * @param {Array} list - The list.\n  * @param {Array} values - The values of the list-placeholder text-code.\n  * @return {string} The token-object.\n   */\n\n  Component_TextRenderer.prototype.createListToken = function(list, values) {\n    var index;\n    index = 0;\n    if (values[1] != null) {\n      values = values[1].split(\":\");\n      index = values[0];\n      if (values[0] === \"G\") {\n        index = GameManager.variableStore.numbers[parseInt(values[1]) - 1];\n      } else if (values[0] === \"P\") {\n        index = GameManager.variableStore.persistentNumbers[parseInt(values[1]) - 1];\n      } else if (values[0] === \"L\") {\n        index = GameManager.variableStore.numberValueOf({\n          scope: 0,\n          index: parseInt(values[1]) - 1\n        });\n      }\n    }\n    return \"\" + list[index];\n  };\n\n\n  /**\n  * Parses and returns the variable identifier which is an array containing\n  * the optional domain name and the variable index as: [domain, index].\n  *\n  * @method parseVariableIdentifier\n  * @param {string} identifier - The variable identifier e.g. com.degica.vnm.default.1 or com.degica.vnm.default.VarName\n  * @param {string} type - The variable type to parse: number, string, boolean or list\n  * @param {string} type - The scope of the variable to parse: 0 = local, 1 = global, 2 = persistent.\n  * @return {Array} An array containing two values as: [domain, index]. If the identifier doesn't contain a domain-string, the domain will be 0 (default).\n   */\n\n  Component_TextRenderer.prototype.parseVariableIdentifier = function(identifier, type, scope) {\n    var index, result;\n    result = [0, identifier];\n    if (isNaN(identifier)) {\n      index = identifier.lastIndexOf(\".\");\n      if (index !== -1) {\n        result[0] = identifier.substring(0, index);\n        result[1] = identifier.substring(index + 1);\n        if (isNaN(result[1])) {\n          result[1] = GameManager.variableStore.indexOfVariable(result[1], type, scope, result[0]) + 1;\n        } else {\n          result[1] = parseInt(result[1]);\n        }\n      } else {\n        result[1] = GameManager.variableStore.indexOfVariable(result[1], type, scope, result[0]) + 1;\n      }\n    } else {\n      result[1] = parseInt(result[1]);\n    }\n    return result;\n  };\n\n  Component_TextRenderer.prototype.replacePlaceholderTokens = function(text) {\n    var result;\n    result = text;\n    result = text.replace(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm, (function(_this) {\n      return function(m, code, value) {\n        var token;\n        token = _this.createToken(code, value);\n        if (typeof token === \"string\") {\n          return token;\n        } else {\n          return m;\n        }\n      };\n    })(this));\n    return result;\n  };\n\n\n  /**\n  * Creates a token-object for a specified text-code.\n  *\n  * @method createToken\n  * @param {string} code - The code/type of the text-code.\n  * @param {string} value - The value of the text-code.\n  * @return {Object} The token-object.\n   */\n\n  Component_TextRenderer.prototype.createToken = function(code, value) {\n    var format, last, listIdentifier, macro, pair, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, tokenObject, values;\n    tokenObject = null;\n    value = isNaN(value) ? value : parseInt(value);\n    switch (code) {\n      case \"SZ\":\n        tokenObject = new gs.RendererToken(code, value);\n        this.font.size = tokenObject.value || this.fontSize;\n        this.spaceSize = this.font.measureTextPlain(\" \");\n        break;\n      case \"Y\":\n        tokenObject = {\n          code: code,\n          value: value\n        };\n        switch (value) {\n          case \"U\":\n            this.font.underline = true;\n            break;\n          case \"S\":\n            this.font.strikeThrough = true;\n            break;\n          case \"I\":\n            this.font.italic = true;\n            break;\n          case \"B\":\n            this.font.bold = true;\n            break;\n          case \"C\":\n            this.font.smallCaps = true;\n            break;\n          case \"NU\":\n            this.font.underline = false;\n            break;\n          case \"NS\":\n            this.font.strikeThrough = false;\n            break;\n          case \"NI\":\n            this.font.italic = false;\n            break;\n          case \"NB\":\n            this.font.bold = false;\n            break;\n          case \"NC\":\n            this.font.smallCaps = false;\n            break;\n          case \"N\":\n            this.font.underline = false;\n            this.font.strikeThrough = false;\n            this.font.italic = false;\n            this.font.bold = false;\n            this.font.smallCaps = false;\n        }\n        this.spaceSize = this.font.measureTextPlain(\" \");\n        break;\n      case \"C\":\n        tokenObject = new gs.RendererToken(code, value);\n        if (isNaN(value)) {\n          this.font.color = gs.Color.fromHex(value);\n        } else if (value <= 0) {\n          this.font.color = Font.defaultColor;\n        } else {\n          this.font.color = gs.Color.fromObject(RecordManager.system.colors[value - 1] || Font.defaultColor);\n        }\n        break;\n      case \"GN\":\n        values = isNaN(value) ? value.split(\",\") : [value];\n        if (values[1]) {\n          format = values[1];\n          values = this.parseVariableIdentifier(values[0], \"number\", 1);\n          tokenObject = sprintf(\"%\" + format + \"d\", GameManager.variableStore.numbersByDomain[values[0] || 0][values[1] - 1] || 0);\n        } else {\n          values = this.parseVariableIdentifier(values[0], \"number\", 1);\n          tokenObject = (GameManager.variableStore.numbersByDomain[values[0] || 0][values[1] - 1] || 0).toString();\n        }\n        break;\n      case \"GT\":\n        values = this.parseVariableIdentifier(value, \"string\", 1);\n        tokenObject = GameManager.variableStore.stringsByDomain[values[0] || 0][values[1] - 1] || \"\";\n        tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n        if (tokenObject.length > 1) {\n          last = tokenObject[tokenObject.length - 1];\n          if (!((last != null ? last.length : void 0) > 0)) {\n            tokenObject.pop();\n          }\n        } else {\n          tokenObject = (ref = tokenObject[0]) != null ? ref : \"\";\n        }\n        break;\n      case \"GS\":\n        values = this.parseVariableIdentifier(value, \"boolean\", 1);\n        tokenObject = (GameManager.variableStore.booleansByDomain[values[0] || 0][values[1] - 1] || false).toString();\n        break;\n      case \"GL\":\n        values = value.split(\",\");\n        listIdentifier = this.parseVariableIdentifier(values[0], \"list\", 1);\n        tokenObject = this.createListToken(GameManager.variableStore.listsByDomain[listIdentifier[0]][listIdentifier[1] - 1] || [], values);\n        break;\n      case \"PN\":\n        values = isNaN(value) ? value.split(\",\") : [value];\n        if (values[1]) {\n          format = values[1];\n          values = this.parseVariableIdentifier(values[0], \"number\", 2);\n          tokenObject = sprintf(\"%\" + format + \"d\", ((ref1 = GameManager.variableStore.persistentNumbers[values[0]]) != null ? ref1[values[1] - 1] : void 0) || 0);\n        } else {\n          values = this.parseVariableIdentifier(values[0], \"number\", 2);\n          tokenObject = (((ref2 = GameManager.variableStore.persistentNumbersByDomain[values[0] || 0]) != null ? ref2[values[1] - 1] : void 0) || 0).toString();\n        }\n        break;\n      case \"PT\":\n        values = this.parseVariableIdentifier(value, \"string\", 2);\n        tokenObject = ((ref3 = GameManager.variableStore.persistentStringsByDomain[values[0]]) != null ? ref3[values[1] - 1] : void 0) || \"\";\n        tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n        if (tokenObject.length > 1) {\n          last = tokenObject[tokenObject.length - 1];\n          if (!((last != null ? last.length : void 0) > 0)) {\n            tokenObject.pop();\n          }\n        } else {\n          tokenObject = (ref4 = tokenObject[0]) != null ? ref4 : \"\";\n        }\n        break;\n      case \"PS\":\n        values = this.parseVariableIdentifier(value, \"boolean\", 2);\n        tokenObject = (((ref5 = GameManager.variableStore.persistentBooleansByDomain[values[0]]) != null ? ref5[values[1] - 1] : void 0) || false).toString();\n        break;\n      case \"PL\":\n        values = value.split(\",\");\n        listIdentifier = this.parseVariableIdentifier(values[0], \"list\", 2);\n        tokenObject = this.createListToken(((ref6 = GameManager.variableStore.persistentListsByDomain[listIdentifier[0]]) != null ? ref6[listIdentifier[1] - 1] : void 0) || [], values);\n        break;\n      case \"LN\":\n        values = isNaN(value) ? value.split(\",\") : [value];\n        if (values[1]) {\n          format = values[1];\n          values = this.parseVariableIdentifier(values[0], \"number\", 0);\n          tokenObject = sprintf(\"%\" + format + \"d\", GameManager.variableStore.numberValueOf({\n            scope: 0,\n            index: values[1] - 1\n          }) || 0);\n        } else {\n          values = this.parseVariableIdentifier(values[0], \"number\", 0);\n          tokenObject = (GameManager.variableStore.numberValueOf({\n            scope: 0,\n            index: values[1] - 1\n          }) || 0).toString();\n        }\n        break;\n      case \"LT\":\n        values = this.parseVariableIdentifier(value, \"string\", 0);\n        tokenObject = (GameManager.variableStore.stringValueOf({\n          scope: 0,\n          index: values[1] - 1\n        }) || \"\").toString();\n        tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n        if (tokenObject.length > 1) {\n          last = tokenObject[tokenObject.length - 1];\n          if (!((last != null ? last.length : void 0) > 0)) {\n            tokenObject.pop();\n          }\n        } else {\n          tokenObject = (ref7 = tokenObject[0]) != null ? ref7 : \"\";\n        }\n        break;\n      case \"LS\":\n        values = this.parseVariableIdentifier(value, \"boolean\", 0);\n        tokenObject = (GameManager.variableStore.booleanValueOf({\n          scope: 0,\n          index: values[1] - 1\n        }) || false).toString();\n        break;\n      case \"LL\":\n        values = value.split(\",\");\n        listIdentifier = this.parseVariableIdentifier(values[0], \"list\", 0);\n        tokenObject = this.createListToken(GameManager.variableStore.listObjectOf({\n          scope: 0,\n          index: listIdentifier[1] - 1\n        }) || [], values);\n        break;\n      case \"N\":\n        tokenObject = (RecordManager.characters[value] != null ? lcs(RecordManager.characters[value].name) : \"\");\n        break;\n      case \"RT\":\n        pair = value.split(\"/\");\n        tokenObject = {\n          code: code,\n          rtStyleId: (ref8 = pair[2]) != null ? ref8 : 0,\n          rb: pair[0],\n          rt: pair[1],\n          rbSize: {\n            width: 0,\n            height: 0\n          },\n          rtSize: {\n            width: 0,\n            height: 0\n          }\n        };\n        break;\n      case \"M\":\n        macro = RecordManager.system.textMacros.first(function(m) {\n          return m.name === value;\n        });\n        if (macro) {\n          if (macro.type === 0) {\n            tokenObject = macro.content.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n            tokenObject.pop();\n          } else if (macro.type === 1) {\n            if (!macro.contentFunc) {\n              macro.contentFunc = eval(\"(function(object, value){ \" + macro.content + \" })\");\n            }\n            tokenObject = macro.contentFunc(this.object, value);\n            tokenObject = tokenObject.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n            if (tokenObject.length > 1) {\n              tokenObject.pop();\n            }\n          } else {\n            if (!macro.contentFunc) {\n              macro.contentFunc = eval(\"(function(object){ \" + macro.content + \" })\");\n            }\n            tokenObject = new gs.RendererToken(\"X\", macro.contentFunc);\n          }\n        } else {\n          tokenObject = \"\";\n        }\n        break;\n      default:\n        tokenObject = new gs.RendererToken(code, value);\n    }\n    return tokenObject;\n  };\n\n\n  /**\n  * <p>Gets the correct font for the specified ruby-text token.</p>\n  *\n  * @param {Object} token - A ruby-text token.\n  * @return {gs.Font} The font for the ruby-text which is shown above the original text.\n  * @method getRubyTextFont\n   */\n\n  Component_TextRenderer.prototype.getRubyTextFont = function(token) {\n    var font, ref, style;\n    style = null;\n    font = null;\n    if (token.rtStyleId) {\n      style = ui.UIManager.styles[\"rubyText-\" + token.rtStyleId];\n    }\n    if (!style) {\n      style = ui.UIManager.styles[\"rubyText\"];\n    }\n    font = (ref = style != null ? style.font : void 0) != null ? ref : this.font;\n    font.size = font.size || this.font.size / 2;\n    return font;\n  };\n\n\n  /**\n  * <p>Measures a control-token. If a token produces a visual result like displaying an icon then it must return the size taken by\n  * the visual result. If the token has no visual result, <b>null</b> must be returned. This method is called for every token when the message is initialized.</p>\n  *\n  * @param {Object} token - A control-token.\n  * @return {gs.Size} The size of the area taken by the visual result of the token or <b>null</b> if the token has no visual result.\n  * @method measureControlToken\n  * @protected\n   */\n\n  Component_TextRenderer.prototype.measureControlToken = function(token) {\n    var animation, font, fs, imageBitmap, size;\n    size = null;\n    switch (token.code) {\n      case \"A\":\n        animation = RecordManager.animations[Math.max(token.value - 1, 0)];\n        if ((animation != null ? animation.graphic.name : void 0) != null) {\n          imageBitmap = ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic));\n          if (imageBitmap != null) {\n            size = {\n              width: Math.round(imageBitmap.width / animation.framesX),\n              height: Math.round(imageBitmap.height / animation.framesY)\n            };\n          }\n        }\n        break;\n      case \"RT\":\n        font = this.getRubyTextFont(token);\n        fs = font.size;\n        font.size = font.size || this.font.size / 2;\n        token.rbSize = this.font.measureTextPlain(token.rb);\n        token.rtSize = font.measureTextPlain(token.rt);\n        font.size = fs;\n        size = {\n          width: Math.max(token.rbSize.width, token.rtSize.width),\n          height: token.rbSize.height + token.rtSize.height\n        };\n    }\n    return size;\n  };\n\n\n  /**\n  * <p>Draws the visual result of a token, like an icon for example, to the specified bitmap. This method is called for every token while the text is rendered.</p>\n  *\n  * @param {Object} token - A control-token.\n  * @param {gs.Bitmap} bitmap - The bitmap used for the current text-line. Can be used to draw something on it like an icon, etc.\n  * @param {number} offset - An x-offset for the draw-routine.\n  * @method drawControlToken\n  * @protected\n   */\n\n  Component_TextRenderer.prototype.drawControlToken = function(token, bitmap, offset) {\n    var animation, font, fs, imageBitmap, rect, ref, ref1, style;\n    switch (token.code) {\n      case \"A\":\n        animation = RecordManager.animations[Math.max(token.value - 1, 0)];\n        if ((animation != null ? animation.graphic.name : void 0) != null) {\n          imageBitmap = ResourceManager.getBitmap(ResourceManager.getPath(animation.graphic));\n          if (imageBitmap != null) {\n            rect = new gs.Rect(0, 0, Math.round(imageBitmap.width / animation.framesX), Math.round(imageBitmap.height / animation.framesY));\n            return bitmap.blt(offset, this.currentY, imageBitmap, rect);\n          }\n        }\n        break;\n      case \"RT\":\n        style = null;\n        if (token.rtStyleId) {\n          style = ui.UIManager.styles[\"rubyText-\" + token.rtStyleId];\n        }\n        if (!style) {\n          style = ui.UIManager.styles[\"rubyText\"];\n        }\n        font = (ref = style != null ? style.font : void 0) != null ? ref : this.object.font;\n        fs = font.size;\n        font.size = font.size || this.object.font.size / 2;\n        if (style && !((ref1 = style.descriptor.font) != null ? ref1.color : void 0)) {\n          font.color.set(this.object.font.color);\n        }\n        bitmap.font = font;\n        bitmap.drawText(offset, bitmap.font.descent, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rt, 1, 0);\n        bitmap.font = this.object.font;\n        font.size = fs;\n        return bitmap.drawText(offset, token.rtSize.height, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rb, 1, 0);\n    }\n  };\n\n\n  /**\n  * Splits up the specified token using a japanese word-wrap technique.\n  *\n  * @method wordWrapJapanese\n  * @param {Object} token - The token to split up.\n  * @param {gs.RendererTextLine} line - The current line.\n  * @param {number} width - The width of the current line.\n  * @param {number} height - The height of the current line.\n  * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n  * lines are added to this result array.\n  * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n  * are created it has to be the last new created line.\n   */\n\n  Component_TextRenderer.prototype.wordWrapJapanese = function(token, line, width, height, result) {\n    var ch, depth, depthLevel, descent, endOfLine, i, j, lastCharacterIndex, moved, noSplit, size, startOfLine;\n    startOfLine = '—…‥〳〴〵。.・、:;, ?!‼⁇⁈⁉‐゠–〜)]｝〕〉》」』】〙〗〟’\"｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻';\n    endOfLine = '([｛〔〈《「『【〘〖〝‘\"｟«';\n    noSplit = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789０１２３４５６７８９—…‥〳〴〵';\n    descent = this.font.descent;\n    size = this.font.measureTextPlain(token);\n    depth = 8;\n    depthLevel = 0;\n    i = 0;\n    j = 0;\n    lastCharacterIndex = 0;\n    if (size.width > this.object.dstRect.width - this.spaceSize.width * 3 - this.padding * 2) {\n      while (i < token.length) {\n        ch = token[i];\n        size = this.font.measureTextPlain(ch);\n        width += size.width;\n        moved = false;\n        if (width > this.object.dstRect.width - this.padding * 2) {\n          depthLevel = 0;\n          j = i;\n          while (true) {\n            moved = false;\n            while (j > 0 && startOfLine.indexOf(token[j]) !== -1) {\n              j--;\n              moved = true;\n            }\n            while (j > 0 && endOfLine.indexOf(token[j - 1]) !== -1) {\n              j--;\n              moved = true;\n            }\n            while (j > 0 && noSplit.indexOf(token[j - 1]) !== -1) {\n              j--;\n              moved = true;\n            }\n            if (j === 0 && moved) {\n              break;\n            } else {\n              i = j;\n            }\n            depthLevel++;\n            if (depthLevel >= depth || !moved) {\n              break;\n            }\n          }\n          line.content.push(new gs.RendererToken(null, token.substring(lastCharacterIndex, i), this.font));\n          lastCharacterIndex = i;\n          line.height = Math.max(height, this.font.lineHeight);\n          line.width = width - size.width;\n          line.descent = descent;\n          descent = this.font.descent;\n          height = size.height;\n          result.push(line);\n          line = new gs.RendererTextLine();\n          width = width - (width - size.width);\n        }\n        i++;\n      }\n    } else {\n      line.content.push(new gs.RendererToken(null, token, this.font));\n      line.height = Math.max(height, this.font.lineHeight);\n      line.width = width + size.width;\n      line.descent = descent;\n    }\n    height = Math.max(height, this.font.lineHeight);\n    if (lastCharacterIndex !== i) {\n      line.content.push(new gs.RendererToken(null, token.substring(lastCharacterIndex, i), this.font));\n      line.width = width;\n      line.height = Math.max(height, line.height);\n      line.descent = descent;\n    }\n    return line;\n  };\n\n\n  /**\n  * Does not word-wrapping at all. It just adds the text token to the line as is.\n  *\n  * @method wordWrapNone\n  * @param {Object} token - The token to split up.\n  * @param {gs.RendererTextLine} line - The current line.\n  * @param {number} width - The width of the current line.\n  * @param {number} height - The height of the current line.\n  * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n  * lines are added to this result array.\n  * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n  * are created it has to be the last new created line.\n   */\n\n  Component_TextRenderer.prototype.wordWrapNone = function(token, line, width, height, result) {\n    var size;\n    size = this.font.measureTextPlain(token);\n    height = Math.max(size.height, height || this.font.lineHeight);\n    if (token.length > 0) {\n      width += size.width;\n      line.width = width;\n      line.height = Math.max(height, line.height);\n      line.descent = this.font.descent;\n      line.content.push(new gs.RendererToken(null, token));\n    }\n    return line;\n  };\n\n\n  /**\n  * Splits up the specified token using a space-based word-wrap technique.\n  *\n  * @method wordWrapSpaceBased\n  * @param {Object} token - The token to split up.\n  * @param {gs.RendererTextLine} line - The current line.\n  * @param {number} width - The width of the current line.\n  * @param {number} height - The height of the current line.\n  * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n  * lines are added to this result array.\n  * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n  * are created it has to be the last new created line.\n   */\n\n  Component_TextRenderer.prototype.wordWrapSpaceBased = function(token, line, width, height, result) {\n    var currentWords, descent, i, k, len, size, word, words;\n    currentWords = [];\n    words = token.split(\" \");\n    descent = this.font.descent;\n    this.spaceSize = this.font.measureTextPlain(\" \");\n    for (i = k = 0, len = words.length; k < len; i = ++k) {\n      word = words[i];\n      size = this.font.measureTextPlain(word);\n      width += size.width + this.spaceSize.width;\n      if (width > this.object.dstRect.width - this.padding * 2) {\n        token = new gs.RendererToken(null, currentWords.join(\" \"));\n        token.takeFormat(this.font);\n        line.content.push(token);\n        line.height = Math.max(height, line.height);\n        line.width = width - size.width;\n        line.descent = Math.max(line.descent, descent);\n        descent = Math.max(descent, this.font.descent);\n        height = size.height;\n        result.push(line);\n        line = new gs.RendererTextLine();\n        currentWords = [word];\n        width = width - (width - size.width);\n      } else {\n        currentWords.push(word);\n      }\n      height = Math.max(height, this.font.lineHeight);\n    }\n    if (currentWords.length > 0) {\n      token = new gs.RendererToken(null, currentWords.join(\" \"));\n      token.takeFormat(this.font);\n      line.content.push(token);\n      line.width = width;\n      line.height = Math.max(height, line.height);\n      line.descent = Math.max(descent, line.descent);\n    }\n    return line;\n  };\n\n\n  /**\n  * Splits up the specified token using a word-wrap technique. The kind of word-wrap technique\n  * depends on the selected language. You can overwrite this method in derived classes to implement your\n  * own custom word-wrap techniques.\n  *\n  * @method executeWordWrap\n  * @param {Object} token - The token to split up.\n  * @param {gs.RendererTextLine} line - The current line.\n  * @param {number} width - The width of the current line.\n  * @param {number} height - The height of the current line.\n  * @param {gs.RendererTextLine[]} - An array of lines. If the token is split up into multiple lines, all new\n  * lines are added to this result array.\n  * @return {gs.RendererTextLine} The current line, that may be the same as the <b>line</b> parameters but if new lines\n  * are created it has to be the last new created line.\n   */\n\n  Component_TextRenderer.prototype.executeWordWrap = function(token, line, width, height, result, wordWrap) {\n    if (wordWrap) {\n      switch (LanguageManager.language.wordWrap) {\n        case \"spaceBased\":\n          return this.wordWrapSpaceBased(token, line, width, height, result);\n        case \"japanese\":\n          return this.wordWrapJapanese(token, line, width, height, result);\n      }\n    } else {\n      return this.wordWrapNone(token, line, width, height, result);\n    }\n  };\n\n\n  /**\n  * Creates an a of line-objects. Each line-object is a list of token-objects.\n  * A token-object can be just a string or an object containing more information\n  * about how to process the token at runtime.\n  *\n  * A line-object also contains additional information like the width and height\n  * of the line(in pixels).\n  *\n  * If the wordWrap param is set, line-breaks are automatically created if a line\n  * doesn't fit into the width of the game object's bitmap.\n  *\n  * @method calculateLines\n  * @param {string} message - A message creating the line-objects for.\n  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n  * @param {number} [firstLineWidth=0] - The current width of the first line.\n  * @return {Array} An array of line-objects.\n   */\n\n  Component_TextRenderer.prototype.calculateLines = function(message, wordWrap, firstLineWidth) {\n    var bold, currentWords, descent, height, italic, line, result, size, smallCaps, strikeThrough, t, token, tokenObject, tokens, underline, width;\n    result = [];\n    line = new gs.RendererTextLine();\n    width = firstLineWidth || 0;\n    height = 0;\n    descent = this.font.descent;\n    currentWords = [];\n    size = null;\n    this.spaceSize = this.font.measureChar(\" \");\n    this.fontSize = this.font.size;\n    tokens = message.split(/\\{([A-z]+):([^\\{\\}]+)\\}|(\\n)/gm);\n    token = null;\n    t = 0;\n    underline = this.font.underline;\n    strikeThrough = this.font.strikeThrough;\n    italic = this.font.italic;\n    bold = this.font.bold;\n    smallCaps = this.font.smallCaps;\n    while (t < tokens.length) {\n      token = tokens[t];\n      if (t % 4 !== 0) {\n        if (token != null) {\n          tokenObject = this.createToken(token, tokens[t + 1]);\n          if (tokenObject.push != null) {\n            Array.prototype.splice.apply(tokens, [t + 3, 0].concat(tokenObject));\n          } else if (tokenObject.code == null) {\n            tokens[t + 3] = tokenObject + tokens[t + 3];\n          } else {\n            size = this.measureControlToken(tokenObject);\n            if (size) {\n              width += size.width;\n              height = Math.max(height, size.height);\n            }\n            line.content.push(tokenObject);\n          }\n        } else {\n          line.height = height || this.font.lineHeight;\n          line.width = width;\n          line.descent = descent;\n          result.push(line);\n          line = new gs.RendererTextLine();\n          line.content.push(new gs.RendererToken(null, \"\\n\", this.font));\n          width = 0;\n          height = 0;\n          descent = this.font.descent;\n        }\n        t += 2;\n      } else if (token.length > 0) {\n        line = this.executeWordWrap(token, line, width, height, result, wordWrap);\n        width = line.width;\n        height = line.height;\n        descent = line.descent;\n      }\n      t++;\n    }\n    if (line.content.length > 0 || result.length === 0) {\n      line.height = height;\n      line.width = width;\n      line.descent = descent;\n      result.push(line);\n    }\n    this.font.size = this.fontSize;\n    this.font.underline = underline;\n    this.font.strikeThrough = strikeThrough;\n    this.font.italic = italic;\n    this.font.bold = bold;\n    this.font.smallCaps = smallCaps;\n    return result;\n  };\n\n\n  /**\n  * Measures the dimensions of formatted lines in pixels. The result is not\n  * pixel-perfect.\n  *\n  * @method measureFormattedLines\n  * @param {gs.RendererTextLine[]} lines - An array of text lines to measure.\n  * @param {boolean} wordWrap - If wordWrap is set to true, automatically created line-breaks will be calculated.\n  * @result {Object} An object containing the width and height of the text.\n   */\n\n  Component_TextRenderer.prototype.measureFormattedLines = function(lines, wordWrap) {\n    var k, len, line, size;\n    size = {\n      width: 0,\n      height: 0\n    };\n    for (k = 0, len = lines.length; k < len; k++) {\n      line = lines[k];\n      size.width = Math.max(line.width + 2, size.width);\n      size.height += line.height + this.lineSpacing;\n    }\n    size.height -= this.lineSpacing;\n    return size;\n  };\n\n\n  /**\n  * Measures the dimensions of a formatted text in pixels. The result is not\n  * pixel-perfect.\n  *\n  * @method measureFormattedText\n  * @param {string} text - The text to measure.\n  * @param {boolean} wordWrap - If wordWrap is set to true, automatically created line-breaks will be calculated.\n  * @result {Object} An object containing the width and height of the text.\n   */\n\n  Component_TextRenderer.prototype.measureFormattedText = function(text, wordWrap) {\n    var lines, size;\n    this.font.set(this.object.font);\n    size = null;\n    lines = this.calculateLines(text, wordWrap);\n    size = this.measureFormattedLines(lines, wordWrap);\n    return size;\n  };\n\n\n  /**\n  * Measures the dimensions of a plain text in pixels. Formatting and\n  * word-wrapping are not supported.\n  *\n  * @method measureText\n  * @param {string} text - The text to measure.\n  * @result {Object} An object containing the width and height of the text.\n   */\n\n  Component_TextRenderer.prototype.measureText = function(text) {\n    var k, len, line, lineSize, lines, size;\n    size = {\n      width: 0,\n      height: 0\n    };\n    lines = text.toString().split(\"\\n\");\n    for (k = 0, len = lines.length; k < len; k++) {\n      line = lines[k];\n      lineSize = this.object.font.measureText(text);\n      size.width = Math.max(size.width, lineSize.width);\n      size.height += this.object.font.lineHeight + this.lineSpacing;\n    }\n    size.height -= this.lineSpacing;\n    return size;\n  };\n\n\n  /**\n  * Searches for a token in a list of tokens and returns the first match.\n  *\n  * @method findToken\n  * @param {number} startIndex - The index in the list of tokens where the search will start.\n  * @param {string} code - The code of the token to search for.\n  * @param {number} direction - The search direction, can be forward(1) or backward(-1).\n  * @param {Object[]} tokens - The list of tokens to search.\n  * @result {Object} The first token which matches the specified code or <b>null</b> if the token cannot be found.\n   */\n\n  Component_TextRenderer.prototype.findToken = function(startIndex, code, direction, tokens) {\n    var i, t, token;\n    token = null;\n    i = startIndex;\n    if (direction === -1) {\n      while (i >= 0) {\n        t = tokens[i];\n        if (t.code === code) {\n          token = t;\n          break;\n        }\n        i--;\n      }\n    }\n    return token;\n  };\n\n\n  /**\n  * Searches for a specific kind of tokens between a start and an end token.\n  *\n  * @method findTokensBetween\n  * @param {number} startIndex - The index where the search will start.\n  * @param {number} endIndex - The index where the search will end.\n  * @param {string} code - The code of the token-type to search for.\n  * @param {Object[]} tokens - The list of tokens to search.\n  * @result {Object[]} List of tokens matching the specified code. Its an empty list if no tokens were found.\n   */\n\n  Component_TextRenderer.prototype.findTokensBetween = function(startIndex, endIndex, code, tokens) {\n    var e, result, s, token;\n    result = [];\n    s = startIndex;\n    e = endIndex;\n    while (s < e) {\n      token = tokens[s];\n      if (token.code == code) {\n        result.push(token);\n      }\n      s++;\n    }\n    return result;\n  };\n\n\n  /**\n  * Processes a control-token. A control-token is a token which influences\n  * the text-rendering like changing the fonts color, size or style.\n  *\n  * Changes will be automatically applied to the game object's font.\n  *\n  * @method processControlToken\n  * @param {Object} token - A control-token.\n  * @return {Object} An object which can contain additional info needed for processing.\n   */\n\n  Component_TextRenderer.prototype.processControlToken = function(token) {\n    var result;\n    result = null;\n    switch (token.code) {\n      case \"SZ\":\n        this.object.font.size = token.value || this.fontSize;\n        break;\n      case \"C\":\n        if (isNaN(token.value)) {\n          this.object.font.color = gs.Color.fromHex(token.value);\n        } else if (token.value <= 0) {\n          this.object.font.color = Font.defaultColor;\n        } else {\n          this.object.font.color = RecordManager.system.colors[token.value - 1] || Font.defaultColor;\n        }\n        break;\n      case \"Y\":\n        switch (token.value) {\n          case \"U\":\n            this.object.font.underline = true;\n            break;\n          case \"S\":\n            this.object.font.strikeThrough = true;\n            break;\n          case \"I\":\n            this.object.font.italic = true;\n            break;\n          case \"B\":\n            this.object.font.bold = true;\n            break;\n          case \"C\":\n            this.object.font.smallCaps = true;\n            break;\n          case \"NU\":\n            this.object.font.underline = false;\n            break;\n          case \"NS\":\n            this.object.font.strikeThrough = false;\n            break;\n          case \"NI\":\n            this.object.font.underline = false;\n            break;\n          case \"NB\":\n            this.object.font.bold = false;\n            break;\n          case \"NC\":\n            this.object.font.smallCaps = false;\n            break;\n          case \"N\":\n            this.object.font.underline = false;\n            this.object.font.strikeThrough = false;\n            this.object.font.italic = false;\n            this.object.font.bold = false;\n            this.object.font.smallCaps = false;\n        }\n    }\n    return result;\n  };\n\n\n  /**\n  * Draws a plain text. Formatting and word-wrapping are not supported.\n  *\n  * @method drawText\n  * @param {number} x - The x-coordinate of the text's position.\n  * @param {number} y - The y-coordinate of the text's position.\n  * @param {number} width - Deprecated. Can be null.\n  * @param {number} height - Deprecated. Can be null.\n  * @param {string} text - The text to draw.\n   */\n\n  Component_TextRenderer.prototype.drawText = function(pl, pt, pr, pb, text) {\n    var font, height, i, k, len, line, lines, size;\n    lines = text.toString().split(\"\\n\");\n    font = this.object.font;\n    height = font.lineHeight;\n    for (i = k = 0, len = lines.length; k < len; i = ++k) {\n      line = lines[i];\n      size = font.measureText(line);\n      this.object.bitmap.drawText(pl, i * height + pt, size.width + pr + pl, height + pt + pb, line, 0, 0);\n    }\n    return null;\n  };\n\n\n  /**\n  * Draws an array of formatted text lines.\n  * If the wordWrap param is set, line-breaks are automatically created if a line\n  * doesn't fit into the width of the game object's bitmap.\n  *\n  * @method drawFormattedLines\n  * @param {number} pl - The left-padding of the text's position.\n  * @param {number} pt - The top-padding of the text's position.\n  * @param {number} pr - The right-padding of the text's position.\n  * @param {number} pb - The bottom-padding of the text's position.\n  * @param {gs.RendererTextLine[]} lines - An array of lines to draw.\n  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n   */\n\n  Component_TextRenderer.prototype.drawFormattedLines = function(pl, pt, pr, pb, lines, wordWrap) {\n    var font, height, k, l, len, len1, line, ref, size, token;\n    this.currentX = pl;\n    this.currentY = pt;\n    this.currentLineHeight = 0;\n    for (k = 0, len = lines.length; k < len; k++) {\n      line = lines[k];\n      ref = line.content;\n      for (l = 0, len1 = ref.length; l < len1; l++) {\n        token = ref[l];\n        if (token.code != null) {\n          this.processControlToken(token);\n          size = this.measureControlToken(token);\n          if (size) {\n            this.drawControlToken(token, this.object.bitmap, this.currentX);\n            this.currentX += size.width;\n          }\n        } else if (token.value.length > 0) {\n          font = this.object.font;\n          height = line.height;\n          if (token.value !== \"\\n\") {\n            size = font.measureTextPlain(token.value);\n            this.object.bitmap.drawText(this.currentX, this.currentY + height - size.height + font.descent - line.descent, size.width + pl + pr, height + pt + pb, token.value, 0, 0);\n            this.currentX += size.width;\n          }\n          this.currentLineHeight = Math.max(this.currentLineHeight, height);\n        }\n      }\n      this.currentY += (this.currentLineHeight || this.object.font.lineHeight) + this.lineSpacing;\n      this.currentX = pl;\n      this.currentLineHeight = 0;\n    }\n    return null;\n  };\n\n\n  /**\n  * Draws a formatted text.\n  * If the wordWrap param is set, line-breaks are automatically created if a line\n  * doesn't fit into the width of the game object's bitmap.\n  *\n  * @method drawFormattedText\n  * @param {number} x - The x-coordinate of the text's position.\n  * @param {number} y - The y-coordinate of the text's position.\n  * @param {number} width - Deprecated. Can be null.\n  * @param {number} height - Deprecated. Can be null.\n  * @param {string} text - The text to draw.\n  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.\n  * @return {gs.RendererTextLine[]} The drawn text lines.\n   */\n\n  Component_TextRenderer.prototype.drawFormattedText = function(pl, pt, pr, pb, text, wordWrap) {\n    var lines;\n    lines = this.calculateLines(text.toString(), wordWrap);\n    this.drawFormattedLines(pl, pt, pr, pb, lines, wordWrap);\n    return lines;\n  };\n\n  return Component_TextRenderer;\n\n})(gs.Component);\n\ngs.Component_TextRenderer = Component_TextRenderer;\n\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=Component_TextRenderer_122.js"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}