{
    "uid": "BF1FEA5EK5664A49F7S92A5E94D58BE44A4A",
    "isLoaded": true,
    "lastModificationTime": 1427731012686,
    "items": {
        "name": "Component_FrameAnimation",
        "type": "game_script",
        "order": 8,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "content": "# ===================================================================\n#\n#   Script: Component_FrameAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\n# FIXME: This class still follows deprecated rules, should be fixed.\nclass Component_FrameAnimation extends gs.Component_Animation\n    ###*\n    * Executes a classic image-frame animation defined in Database. The image in regular\n    * contains multiple sub-images (frames) which are then animated\n    * by modifying the <b>srcRect</b> property of the game object.\n    *\n    * @module gs\n    * @class Component_FrameAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    * @param {Object} record - The animation database-record.\n    ###\n    constructor: (record) ->\n        super\n\n        ###*\n        * The database record.\n        * @property record\n        * @type Object\n        ###\n        @record = null\n\n        ###*\n        * The name of the animation defined in Database.\n        * @property name\n        * @type string\n        ###\n        @name = null\n\n        ###*\n        * The amount of frames on x-axis.\n        * @property framesX\n        * @type number\n        ###\n        @framesX = 1\n\n        ###*\n        * The amount of frames on y-axis.\n        * @property framesY\n        * @type number\n        ###\n        @framesY = 1\n\n        ###*\n        * The frame-range to animation like only Frame 4 - 6 for example.\n        * @property frameRange\n        * @type gs.Range\n        ###\n        @frameRange = { start: 0, end: 0 }\n\n        ###*\n        * The frame-range used if the animation gets repeated.\n        * @property repetitionFrameRange\n        * @type gs.Range\n        ###\n        @repetitionFrameRange = @frameRange\n\n        ###*\n        * The amount of frames to animate.\n        * @property frameCount\n        * @type number\n        * @protected\n        ###\n        @frameCount = 1\n\n        ###*\n        * The graphic used as image for the animation.\n        * @property graphic\n        * @type Object\n        ###\n        @graphic = null\n\n        ###*\n        * Indicates if the animation repeats.\n        * @property repeat\n        * @type boolean\n        ###\n        @repeat = no\n\n        ###*\n        * The position of the animation on the target-object.\n        * @property framesY\n        * @type gs.AnimationPosition\n        ###\n        @position = 0\n\n        ###*\n        * The duration of a single frame.\n        * @property frameDuration\n        * @type number\n        * @protected\n        ###\n        @frameDuration = 10\n\n        ###*\n        * A frame-counter needed for animation-process.\n        * @property frameDuration\n        * @type number\n        * @protected\n        ###\n        @frameCounter = 0\n\n        ###*\n        * The duration of the animation.\n        * @property frameDuration\n        * @type number\n        ###\n        @duration = 10\n\n        ###*\n        * Indicates if the animation is currently running.\n        * @property isRunning\n        * @type boolean\n        ###\n        @isRunning = no\n\n        ###*\n        * Stores frame/pattern-offset.\n        * @property patternOffset\n        * @type number\n        * @protected\n        ###\n        @patternOffset = @frameRange.start\n\n        ###*\n        * Stores current frame/pattern\n        * @property patternOffset\n        * @type number\n        * @protected\n        ###\n        @pattern = @patternOffset\n\n        ###*\n        * Indicates if its still the first run of the animation.\n        * @property firstRun\n        * @type boolean\n        * @protected\n        ###\n        @firstRun = yes\n\n        if record?\n            @refresh(record)\n            @start()\n\n    ###*\n    * Serializes the frame-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###\n    toDataBundle: ->\n        name: @name,\n        framesX: @framesX,\n        framesY: @framesY,\n        frameRange: @frameRange,\n        repetitionFrameRange: @repetitionFrameRange,\n        frameCount: @frameCount,\n        graphic: @graphic,\n        repeat: @repeat,\n        position: @position,\n        frameDuration: @frameDuration,\n        frameCounter: @frameCounter,\n        duration: @duration,\n        isRunning: @isRunning,\n        patternOffset: @patternOffset,\n        pattern: @pattern,\n        firstRun: @firstRun\n\n    ###*\n    * Refreshes the animation from the specified database-record.\n    *\n    * @method refresh\n    * @param {Object} record - The animation database-record.\n    ###\n    # FIXME: Is that method still in use?\n    refresh: (record) ->\n        ###*\n        * The images to animate through.\n        * @property images\n        * @type string[]\n        ###\n        @name = record.name\n        @framesX = record.framesX || 1\n        @framesY = record.framesY || 1\n        @frameRange = { start: Math.min(record.frameRange.start, record.frameRange.end), end: Math.max(record.frameRange.start, record.frameRange.end) }\n        @repetitionFrameRange = if record.useRepetitionFrameRange and record.repetitionFrameRange? then record.repetitionFrameRange else @frameRange\n        @frameCount = (@frameRange.end - @frameRange.start) + 1\n        @graphic = record.graphic\n        @repeat = record.repeat || no\n        @position = record.position\n\n        @frameDuration = if record.duration? then Math.round(record.duration / @frameCount) else 10\n        @frameCounter = 0\n        @duration = record.duration || 10\n        @isRunning = no\n        @patternOffset = @frameRange.start\n        @pattern = @patternOffset\n        @firstRun = yes\n\n    ###*\n    * Starts the frame-animation.\n    *\n    * @method start\n    ###\n    start: (callback) ->\n        @callback = callback\n        @isRunning = yes\n        @firstRun = yes\n        @frameCounter = 0\n        @frameCount = (@frameRange.end - @frameRange.start) + 1\n        @frameDuration = Math.round(@duration / @frameCount)\n        @patternOffset = @frameRange.start - 1\n\n    ###*\n    * Updates the frame-animation.\n    *\n    * @method update\n    ###\n    update: ->\n        super\n        if not @isRunning then return\n\n        if @frameCounter >= @duration\n            if @repeat\n                @firstRun = no\n                @frameCounter = 0\n                @frameCount = (@repetitionFrameRange.end - @repetitionFrameRange.start) + 1\n                @frameDuration = Math.ceil(@duration / @frameCount)\n                @patternOffset = @repetitionFrameRange.start - 1\n            else\n                @isRunning = no\n                @onFinish?(this)\n                @callback?(@object, this)\n                return\n\n        @pattern = @patternOffset + Math.floor(@frameCounter / @frameDuration)\n        @frameCounter++\n\n        if @object?\n            bitmap = @object.bitmap || ResourceManager.getBitmap(\"#{@object.imageFolder||\"Graphics/Pictures\"}/#{@object.image}\")\n\n            if bitmap?\n                frameWidth = Math.floor(bitmap.width / @framesX)\n                frameHeight = Math.floor(bitmap.height / @framesY)\n                column = @pattern % @framesX\n                row = Math.floor(@pattern / @framesX)\n                @object.srcRect.set(column * frameWidth, row * frameHeight, frameWidth, frameHeight)\n                @object.dstRect.width = @object.srcRect.width\n                @object.dstRect.height = @object.srcRect.height\n\n\nwindow.Component_FrameAnimation = Component_FrameAnimation\ngs.Component_FrameAnimation = Component_FrameAnimation",
        "compiledContent": "var Component_FrameAnimation,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nComponent_FrameAnimation = (function(superClass) {\n  extend(Component_FrameAnimation, superClass);\n\n\n  /**\n  * Executes a classic image-frame animation defined in Database. The image in regular\n  * contains multiple sub-images (frames) which are then animated\n  * by modifying the <b>srcRect</b> property of the game object.\n  *\n  * @module gs\n  * @class Component_FrameAnimation\n  * @extends gs.Component_Animation\n  * @memberof gs\n  * @constructor\n  * @param {Object} record - The animation database-record.\n   */\n\n  function Component_FrameAnimation(record) {\n    Component_FrameAnimation.__super__.constructor.apply(this, arguments);\n\n    /**\n    * The database record.\n    * @property record\n    * @type Object\n     */\n    this.record = null;\n\n    /**\n    * The name of the animation defined in Database.\n    * @property name\n    * @type string\n     */\n    this.name = null;\n\n    /**\n    * The amount of frames on x-axis.\n    * @property framesX\n    * @type number\n     */\n    this.framesX = 1;\n\n    /**\n    * The amount of frames on y-axis.\n    * @property framesY\n    * @type number\n     */\n    this.framesY = 1;\n\n    /**\n    * The frame-range to animation like only Frame 4 - 6 for example.\n    * @property frameRange\n    * @type gs.Range\n     */\n    this.frameRange = {\n      start: 0,\n      end: 0\n    };\n\n    /**\n    * The frame-range used if the animation gets repeated.\n    * @property repetitionFrameRange\n    * @type gs.Range\n     */\n    this.repetitionFrameRange = this.frameRange;\n\n    /**\n    * The amount of frames to animate.\n    * @property frameCount\n    * @type number\n    * @protected\n     */\n    this.frameCount = 1;\n\n    /**\n    * The graphic used as image for the animation.\n    * @property graphic\n    * @type Object\n     */\n    this.graphic = null;\n\n    /**\n    * Indicates if the animation repeats.\n    * @property repeat\n    * @type boolean\n     */\n    this.repeat = false;\n\n    /**\n    * The position of the animation on the target-object.\n    * @property framesY\n    * @type gs.AnimationPosition\n     */\n    this.position = 0;\n\n    /**\n    * The duration of a single frame.\n    * @property frameDuration\n    * @type number\n    * @protected\n     */\n    this.frameDuration = 10;\n\n    /**\n    * A frame-counter needed for animation-process.\n    * @property frameDuration\n    * @type number\n    * @protected\n     */\n    this.frameCounter = 0;\n\n    /**\n    * The duration of the animation.\n    * @property frameDuration\n    * @type number\n     */\n    this.duration = 10;\n\n    /**\n    * Indicates if the animation is currently running.\n    * @property isRunning\n    * @type boolean\n     */\n    this.isRunning = false;\n\n    /**\n    * Stores frame/pattern-offset.\n    * @property patternOffset\n    * @type number\n    * @protected\n     */\n    this.patternOffset = this.frameRange.start;\n\n    /**\n    * Stores current frame/pattern\n    * @property patternOffset\n    * @type number\n    * @protected\n     */\n    this.pattern = this.patternOffset;\n\n    /**\n    * Indicates if its still the first run of the animation.\n    * @property firstRun\n    * @type boolean\n    * @protected\n     */\n    this.firstRun = true;\n    if (record != null) {\n      this.refresh(record);\n      this.start();\n    }\n  }\n\n\n  /**\n  * Serializes the frame-animation into a data-bundle.\n  *\n  * @method toDataBundle\n   */\n\n  Component_FrameAnimation.prototype.toDataBundle = function() {\n    return {\n      name: this.name,\n      framesX: this.framesX,\n      framesY: this.framesY,\n      frameRange: this.frameRange,\n      repetitionFrameRange: this.repetitionFrameRange,\n      frameCount: this.frameCount,\n      graphic: this.graphic,\n      repeat: this.repeat,\n      position: this.position,\n      frameDuration: this.frameDuration,\n      frameCounter: this.frameCounter,\n      duration: this.duration,\n      isRunning: this.isRunning,\n      patternOffset: this.patternOffset,\n      pattern: this.pattern,\n      firstRun: this.firstRun\n    };\n  };\n\n\n  /**\n  * Refreshes the animation from the specified database-record.\n  *\n  * @method refresh\n  * @param {Object} record - The animation database-record.\n   */\n\n  Component_FrameAnimation.prototype.refresh = function(record) {\n\n    /**\n    * The images to animate through.\n    * @property images\n    * @type string[]\n     */\n    this.name = record.name;\n    this.framesX = record.framesX || 1;\n    this.framesY = record.framesY || 1;\n    this.frameRange = {\n      start: Math.min(record.frameRange.start, record.frameRange.end),\n      end: Math.max(record.frameRange.start, record.frameRange.end)\n    };\n    this.repetitionFrameRange = record.useRepetitionFrameRange && (record.repetitionFrameRange != null) ? record.repetitionFrameRange : this.frameRange;\n    this.frameCount = (this.frameRange.end - this.frameRange.start) + 1;\n    this.graphic = record.graphic;\n    this.repeat = record.repeat || false;\n    this.position = record.position;\n    this.frameDuration = record.duration != null ? Math.round(record.duration / this.frameCount) : 10;\n    this.frameCounter = 0;\n    this.duration = record.duration || 10;\n    this.isRunning = false;\n    this.patternOffset = this.frameRange.start;\n    this.pattern = this.patternOffset;\n    return this.firstRun = true;\n  };\n\n\n  /**\n  * Starts the frame-animation.\n  *\n  * @method start\n   */\n\n  Component_FrameAnimation.prototype.start = function(callback) {\n    this.callback = callback;\n    this.isRunning = true;\n    this.firstRun = true;\n    this.frameCounter = 0;\n    this.frameCount = (this.frameRange.end - this.frameRange.start) + 1;\n    this.frameDuration = Math.round(this.duration / this.frameCount);\n    return this.patternOffset = this.frameRange.start - 1;\n  };\n\n\n  /**\n  * Updates the frame-animation.\n  *\n  * @method update\n   */\n\n  Component_FrameAnimation.prototype.update = function() {\n    var bitmap, column, frameHeight, frameWidth, row;\n    Component_FrameAnimation.__super__.update.apply(this, arguments);\n    if (!this.isRunning) {\n      return;\n    }\n    if (this.frameCounter >= this.duration) {\n      if (this.repeat) {\n        this.firstRun = false;\n        this.frameCounter = 0;\n        this.frameCount = (this.repetitionFrameRange.end - this.repetitionFrameRange.start) + 1;\n        this.frameDuration = Math.ceil(this.duration / this.frameCount);\n        this.patternOffset = this.repetitionFrameRange.start - 1;\n      } else {\n        this.isRunning = false;\n        if (typeof this.onFinish === \"function\") {\n          this.onFinish(this);\n        }\n        if (typeof this.callback === \"function\") {\n          this.callback(this.object, this);\n        }\n        return;\n      }\n    }\n    this.pattern = this.patternOffset + Math.floor(this.frameCounter / this.frameDuration);\n    this.frameCounter++;\n    if (this.object != null) {\n      bitmap = this.object.bitmap || ResourceManager.getBitmap((this.object.imageFolder || \"Graphics/Pictures\") + \"/\" + this.object.image);\n      if (bitmap != null) {\n        frameWidth = Math.floor(bitmap.width / this.framesX);\n        frameHeight = Math.floor(bitmap.height / this.framesY);\n        column = this.pattern % this.framesX;\n        row = Math.floor(this.pattern / this.framesX);\n        this.object.srcRect.set(column * frameWidth, row * frameHeight, frameWidth, frameHeight);\n        this.object.dstRect.width = this.object.srcRect.width;\n        return this.object.dstRect.height = this.object.srcRect.height;\n      }\n    }\n  };\n\n  return Component_FrameAnimation;\n\n})(gs.Component_Animation);\n\nwindow.Component_FrameAnimation = Component_FrameAnimation;\n\ngs.Component_FrameAnimation = Component_FrameAnimation;\n\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=Component_FrameAnimation_111.js"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}