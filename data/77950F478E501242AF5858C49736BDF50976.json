{
    "uid": "77950F478E501242AF5858C49736BDF50976",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Expression Importer",
        "type": "script",
        "parentId": "AA3A4BE42F4D544A1509F6044F8DC9BF1969",
        "order": 0,
        "content": ""
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}